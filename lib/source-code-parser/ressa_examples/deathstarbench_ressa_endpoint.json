{
  "project_dir": {
    "instanceType": "DirectoryComponent",
    "path": "",
    "files": [],
    "subDirectories": [
      {
        "instanceType": "DIRECTORYCOMPONENT",
        "path": "{{DSB_ROOT}}/mediaMicroservices",
        "instanceName": "{{DSB_ROOT}}/mediaMicroservices::DirectoryComponent",
        "files": [
          "{{DSB_ROOT}}/mediaMicroservices/docker",
          "{{DSB_ROOT}}/mediaMicroservices/third_party",
          "{{DSB_ROOT}}/mediaMicroservices/src",
          "{{DSB_ROOT}}/mediaMicroservices/datasets",
          "{{DSB_ROOT}}/mediaMicroservices/wrk2",
          "{{DSB_ROOT}}/mediaMicroservices/docker-compose.yml",
          "{{DSB_ROOT}}/mediaMicroservices/README.md",
          "{{DSB_ROOT}}/mediaMicroservices/CMakeLists.txt",
          "{{DSB_ROOT}}/mediaMicroservices/gen-py",
          "{{DSB_ROOT}}/mediaMicroservices/.dockerignore",
          "{{DSB_ROOT}}/mediaMicroservices/scripts",
          "{{DSB_ROOT}}/mediaMicroservices/cmake",
          "{{DSB_ROOT}}/mediaMicroservices/nginx-web-server",
          "{{DSB_ROOT}}/mediaMicroservices/config",
          "{{DSB_ROOT}}/mediaMicroservices/media_service.thrift",
          "{{DSB_ROOT}}/mediaMicroservices/gen-lua",
          "{{DSB_ROOT}}/mediaMicroservices/test",
          "{{DSB_ROOT}}/mediaMicroservices/Dockerfile",
          "{{DSB_ROOT}}/mediaMicroservices/docker-compose-sharding.yml",
          "{{DSB_ROOT}}/mediaMicroservices/openshift",
          "{{DSB_ROOT}}/mediaMicroservices/gen-cpp"
        ],
        "subDirectories": [
          {
            "instanceType": "DIRECTORYCOMPONENT",
            "path": "{{DSB_ROOT}}/mediaMicroservices/src",
            "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src::DirectoryComponent",
            "files": [
              "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService",
              "{{DSB_ROOT}}/mediaMicroservices/src/tracing.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/PlotService",
              "{{DSB_ROOT}}/mediaMicroservices/src/RatingService",
              "{{DSB_ROOT}}/mediaMicroservices/src/utils_mongodb.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/utils.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService",
              "{{DSB_ROOT}}/mediaMicroservices/src/PageService",
              "{{DSB_ROOT}}/mediaMicroservices/src/logger.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/CMakeLists.txt",
              "{{DSB_ROOT}}/mediaMicroservices/src/utils_memcached.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/UserService",
              "{{DSB_ROOT}}/mediaMicroservices/src/GenericClient.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService",
              "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService",
              "{{DSB_ROOT}}/mediaMicroservices/src/ThriftClient.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService",
              "{{DSB_ROOT}}/mediaMicroservices/src/TextService",
              "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService",
              "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService",
              "{{DSB_ROOT}}/mediaMicroservices/src/RedisClient.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService",
              "{{DSB_ROOT}}/mediaMicroservices/src/ClientPool.h"
            ],
            "subDirectories": [
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService/UserReviewHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService/UserReviewService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/PlotService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/PlotService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/PlotService/PlotHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/PlotService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/PlotService/PlotService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/PlotService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/RatingService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/RatingService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/RatingService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/RatingService/RatingService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/RatingService/RatingHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/RatingService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService/UniqueIdHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService/UniqueIdService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/PageService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/PageService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/PageService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/PageService/PageService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/PageService/PageHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/PageService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/UserService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/UserService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserService/UserHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserService/UserService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/UserService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService/MovieReviewService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService/MovieReviewHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService/MovieInfoService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService/MovieInfoHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService/MovieIdHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService/MovieIdService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/TextService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/TextService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/TextService/TextService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/TextService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/TextService/TextHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/TextService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService/ReviewStorageHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService/ReviewStorageService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService/ComposeReviewHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService/ComposeReviewService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService/CastInfoService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService/CastInfoHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService/CMakeLists.txt"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService::PackageName"
              }
            ],
            "numFiles": 23,
            "package_name": "{{DSB_ROOT}}/mediaMicroservices/src::PackageName"
          }
        ],
        "numFiles": 21,
        "package_name": "{{DSB_ROOT}}/mediaMicroservices::PackageName"
      }
    ],
    "numFiles": 0
  },
  "patterns": [
    {
      "identifier": "Field",
      "pattern": "#{pool_name}",
      "auxiliary_pattern": "ClientPool<ThriftClient<#{service_name}ServiceClient>>",
      "subpatterns": [],
      "callback": "let service_name = ctx.get_variable(\"service_name\")?;let service_tag = ctx.get_variable(\"pool_name\")?;if !ctx.get(service_name).is_some() { let services = ctx.get_or_save(\"services\", []); ctx.save(service_name, #{ ndx: services.len() }); ctx.make_transient(service_name); services.push(#{ name: service_name, calls: [], endpoints: [] });}ctx.make_tag(service_tag, service_name);",
      "essential": true
    },
    {
      "identifier": "DeclStmt",
      "pattern": "",
      "subpatterns": [
        {
          "identifier": "VarDecl",
          "pattern": "#{wrapper_name}(.*_client_wrapper)",
          "subpatterns": [],
          "essential": true
        },
        {
          "identifier": "CallExpr",
          "pattern": "Pop",
          "auxiliary_pattern": "#&{pool_name}(.*_client_pool)",
          "subpatterns": [],
          "essential": true
        }
      ],
      "callback": "let wrapper_name = ctx.get_variable(\"wrapper_name\")?;let pool_name = ctx.get_variable(\"pool_name\")?;ctx.make_tag(wrapper_name, pool_name);",
      "essential": true
    },
    {
      "identifier": "DeclStmt",
      "pattern": "",
      "subpatterns": [
        {
          "identifier": "VarDecl",
          "pattern": "#{client_name}(.*_client)",
          "subpatterns": [],
          "essential": true
        },
        {
          "identifier": "CallExpr",
          "pattern": "GetClient",
          "auxiliary_pattern": "#&{wrapper_name}",
          "subpatterns": [],
          "essential": true
        }
      ],
      "callback": "let client_name = ctx.get_variable(\"client_name\")?;let wrapper_name = ctx.get_variable(\"wrapper_name\")?;ctx.make_tag(client_name, wrapper_name);",
      "essential": true
    },
    {
      "identifier": "CallExpr",
      "pattern": "#{endpoint_name}",
      "auxiliary_pattern": "#&{client_name}(.*_client$)",
      "subpatterns": [],
      "callback": "let client_name = ctx.get_variable(\"client_name\")?;let endpoint = ctx.get_variable(\"endpoint_name\")?;let svc_desc = ctx.get(client_name)?;if !svc_desc.contains_key(endpoint) { let svc = ctx.get(\"services\")?[svc_desc.ndx]; svc_desc[endpoint] = svc.endpoints.len(); svc.endpoints.push(#{ name: endpoint, type: \"RPC\" }); ctx.make_transient(endpoint);}",
      "essential": true
    },
    {
      "identifier": "ClassOrInterface",
      "pattern": "#{callee_name}Handler",
      "subpatterns": [
        {
          "identifier": "CallExpr",
          "pattern": "#&{endpoint_name}",
          "auxiliary_pattern": "#&{client_name}(.*_client$)",
          "subpatterns": [],
          "essential": true,
          "callback": "let services = ctx.get(\"services\")?;let endpoint_name = ctx.get_variable(\"endpoint_name\")?;let callee = ctx.get_variable(\"callee_name\")?;let client_name = ctx.get_variable(\"client_name\")?;client_name = services[ctx.get(client_name)?.ndx].name;let calling_service = ctx.get(callee).unwrap_or_else(|| { let ndx = services.len(); ctx.save(callee, ndx); ctx.make_transient(callee); services.push(#{ name: callee, calls: [], endpoints: [] }); ctx.save(callee, #{ ndx: ndx })});calling_service = services[calling_service.ndx];calling_service.calls.push(#{ service: client_name, endpoint: endpoint_name, type: \"RPC\" });"
        }
      ],
      "essential": true
    }
  ]
}
