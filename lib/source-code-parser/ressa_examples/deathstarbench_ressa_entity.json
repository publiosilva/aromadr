{
  "project_dir": {
    "instanceType": "DirectoryComponent",
    "path": "",
    "files": [],
    "subDirectories": [
      {
        "instanceType": "DIRECTORYCOMPONENT",
        "path": "{{DSB_ROOT}}/mediaMicroservices",
        "instanceName": "{{DSB_ROOT}}/mediaMicroservices::DirectoryComponent",
        "files": [
          "{{DSB_ROOT}}/mediaMicroservices/docker",
          "{{DSB_ROOT}}/mediaMicroservices/third_party",
          "{{DSB_ROOT}}/mediaMicroservices/src",
          "{{DSB_ROOT}}/mediaMicroservices/datasets",
          "{{DSB_ROOT}}/mediaMicroservices/wrk2",
          "{{DSB_ROOT}}/mediaMicroservices/docker-compose.yml",
          "{{DSB_ROOT}}/mediaMicroservices/README.md",
          "{{DSB_ROOT}}/mediaMicroservices/CMakeLists.txt",
          "{{DSB_ROOT}}/mediaMicroservices/gen-py",
          "{{DSB_ROOT}}/mediaMicroservices/.dockerignore",
          "{{DSB_ROOT}}/mediaMicroservices/scripts",
          "{{DSB_ROOT}}/mediaMicroservices/cmake",
          "{{DSB_ROOT}}/mediaMicroservices/nginx-web-server",
          "{{DSB_ROOT}}/mediaMicroservices/config",
          "{{DSB_ROOT}}/mediaMicroservices/media_service.thrift",
          "{{DSB_ROOT}}/mediaMicroservices/gen-lua",
          "{{DSB_ROOT}}/mediaMicroservices/test",
          "{{DSB_ROOT}}/mediaMicroservices/Dockerfile",
          "{{DSB_ROOT}}/mediaMicroservices/docker-compose-sharding.yml",
          "{{DSB_ROOT}}/mediaMicroservices/openshift",
          "{{DSB_ROOT}}/mediaMicroservices/gen-cpp"
        ],
        "subDirectories": [
          {
            "instanceType": "DIRECTORYCOMPONENT",
            "path": "{{DSB_ROOT}}/mediaMicroservices/src",
            "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src::DirectoryComponent",
            "files": [
              "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService",
              "{{DSB_ROOT}}/mediaMicroservices/src/tracing.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/PlotService",
              "{{DSB_ROOT}}/mediaMicroservices/src/RatingService",
              "{{DSB_ROOT}}/mediaMicroservices/src/utils_mongodb.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/utils.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService",
              "{{DSB_ROOT}}/mediaMicroservices/src/PageService",
              "{{DSB_ROOT}}/mediaMicroservices/src/logger.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/CMakeLists.txt",
              "{{DSB_ROOT}}/mediaMicroservices/src/utils_memcached.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/UserService",
              "{{DSB_ROOT}}/mediaMicroservices/src/GenericClient.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService",
              "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService",
              "{{DSB_ROOT}}/mediaMicroservices/src/ThriftClient.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService",
              "{{DSB_ROOT}}/mediaMicroservices/src/TextService",
              "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService",
              "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService",
              "{{DSB_ROOT}}/mediaMicroservices/src/RedisClient.h",
              "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService",
              "{{DSB_ROOT}}/mediaMicroservices/src/ClientPool.h"
            ],
            "subDirectories": [
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService/UserReviewHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService/UserReviewService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/UserReviewService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/PlotService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/PlotService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/PlotService/PlotHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/PlotService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/PlotService/PlotService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/PlotService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/RatingService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/RatingService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/RatingService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/RatingService/RatingService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/RatingService/RatingHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/RatingService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService/UniqueIdHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService/UniqueIdService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/UniqueIdService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/PageService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/PageService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/PageService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/PageService/PageService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/PageService/PageHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/PageService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/UserService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/UserService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserService/UserHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/UserService/UserService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/UserService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService/MovieReviewService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService/MovieReviewHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/MovieReviewService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService/MovieInfoService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService/MovieInfoHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/MovieInfoService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService/MovieIdHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService/MovieIdService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/MovieIdService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/TextService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/TextService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/TextService/TextService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/TextService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/TextService/TextHandler.h"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/TextService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService/ReviewStorageHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService/ReviewStorageService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/ReviewStorageService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService/CMakeLists.txt",
                  "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService/ComposeReviewHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService/ComposeReviewService.cpp"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/ComposeReviewService::PackageName"
              },
              {
                "instanceType": "DIRECTORYCOMPONENT",
                "path": "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService",
                "instanceName": "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService::DirectoryComponent",
                "files": [
                  "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService/CastInfoService.cpp",
                  "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService/CastInfoHandler.h",
                  "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService/CMakeLists.txt"
                ],
                "subDirectories": [],
                "numFiles": 3,
                "package_name": "{{DSB_ROOT}}/mediaMicroservices/src/CastInfoService::PackageName"
              }
            ],
            "numFiles": 23,
            "package_name": "{{DSB_ROOT}}/mediaMicroservices/src::PackageName"
          }
        ],
        "numFiles": 21,
        "package_name": "{{DSB_ROOT}}/mediaMicroservices::PackageName"
      }
    ],
    "numFiles": 0
  },
  "patterns": [
    {
      "identifier": "Method",
      "pattern": "#{container}",
      "subpatterns": [
        {
          "identifier": "CallExpr",
          "pattern": "mongoc_client_get_collection",
          "subpatterns": [
            {
              "identifier": "Literal",
              "pattern": "\"#{collection}\"",
              "subpatterns": [],
              "essential": true
            }
          ],
          "essential": true
        }
      ],
      "callback": "let container = ctx.get_variable(\"container\")?;let collection = ctx.get_variable(\"collection\")?;ctx.save(collection, #{});ctx.make_transient(container);",
      "essential": true
    },
    {
      "identifier": "Method",
      "pattern": "#&{_method_name}",
      "subpatterns": [
        {
          "identifier": "CallExpr",
          "pattern": "mongoc_client_get_collection",
          "subpatterns": [
            {
              "identifier": "Literal",
              "pattern": "\"#{collection_name}\"",
              "subpatterns": [],
              "essential": true
            }
          ],
          "essential": true
        },
        {
          "identifier": "CallExpr",
          "pattern": "BCON_NEW",
          "subpatterns": [
            {
              "identifier": "Literal",
              "pattern": "",
              "subpatterns": [
                {
                  "identifier": "Literal",
                  "pattern": "\"#{token}(\\$?.+)\"",
                  "subpatterns": [],
                  "essential": true
                },
                {
                  "identifier": "CallExpr",
                  "pattern": "BCON_#{token}(.+)",
                  "subpatterns": [],
                  "essential": true
                }
              ],
              "callback": "ctx.make_transient(\"tokens\");let token = ctx.get_variable(\"token\")?;let tokens = ctx.get(\"tokens\")?;if !tokens.contains_key(\"vec\") { tokens[\"vec\"] = []; }tokens.vec.push(token);ctx.save(\"tokens\", tokens);",
              "essential": true,
              "transparent": true
            }
          ],
          "callback": "fn valid_ndx(tokens, ndx) { 0 <= ndx && ndx < tokens.len() } fn handle_attribute(parent, tokens, ndx, ctx, name, isCollection) { let newParent = if parent.contains_key(name) { parent[name] } else { #{} }; if newParent.contains_key(\"\") { newParent[\"\"].isCollection = isCollection || newParent[\"\"].isCollection; } else { newParent[\"\"] = #{ \"isCollection\": isCollection }; } let tuple = choose_action(newParent, tokens, ndx + 2, ctx); parent[name] = tuple.0; (parent, tuple.1) } fn handle_dollar(parent, tokens, ndx, ctx) { if !valid_ndx(tokens, ndx + 1) { return (parent, ndx); } match tokens[ndx] { \"$pull\" => handle_attribute(parent, tokens, ndx + 2, ctx, tokens[ndx + 2], true), \"$push\" => handle_attribute(parent, tokens, ndx + 2, ctx, tokens[ndx + 2], true), \"$elemMatch\" => { parent[\"\"].isCollection = true; choose_action(parent, tokens, ndx + 1, ctx) } _ => choose_action(parent, tokens, ndx + 1, ctx) } } fn handle_name(parent, tokens, ndx, ctx) { if !valid_ndx(tokens, ndx + 1) { return (parent, ndx); } let name = tokens[ndx]; if name == \"}\" { return (parent, ndx); } else if name == \"projection\" { return (parent, tokens.len() + 1) } match tokens[ndx + 1] { \"{\" => handle_attribute(parent, tokens, ndx, ctx, name, false), \"[\" => handle_attribute(parent, tokens, ndx, ctx, name, true), \"}\" => (parent, ndx + 1), \"]\" => (parent, ndx + 1), literal => { if literal.starts_with(\"$\") { handle_dollar(parent, tokens, ndx, ctx) } else { parent[name] = tokens[ndx + 1]; handle_name(parent, tokens, ndx + 2, ctx) } } } } fn choose_action(parent, tokens, ndx, ctx) { if !valid_ndx(tokens, ndx) { return parent; } match tokens[ndx] { \"{\" => choose_action(parent, tokens, ndx + 1, ctx), \"[\" => choose_action(parent, tokens, ndx + 1, ctx), \"}\" => (parent, ndx + 1), \"]\" => (parent, ndx + 1), token => { if token.starts_with(\"$\") { handle_dollar(parent, tokens, ndx, ctx) } else { handle_name(parent, tokens, ndx, ctx) } } } } fn start(parent, tokens, ctx) { let ndx = 0; while valid_ndx(tokens, ndx) { let tuple = choose_action(parent, tokens, ndx, ctx); parent = tuple.0; ndx = tuple.1; } parent } fn cleanup(ctx) { ctx.save(\"tokens\", #{ \"vec\": [] }); } let tokens = ctx.get(\"tokens\")?.vec; let coll = ctx.get_variable(\"collection_name\")?; let collectionObj = ctx.get_or_save(coll, #{}); match tokens.get(0) { Some(token) => { let result = start(collectionObj, tokens, ctx); ctx.save(coll, result); tokens.clear(); } _ => { tokens.clear(); panic(\"No tokens\"); } } ",
          "essential": true
        }
      ],
      "essential": true
    }
  ]
}
