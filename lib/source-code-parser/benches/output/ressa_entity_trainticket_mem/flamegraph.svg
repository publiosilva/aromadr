<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="10"><g><title>__libc_start_main (1 samples, 10.00%)</title><rect x="0.0000%" y="677" width="10.0000%" height="15" fill="rgb(238,1,48)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50">__libc_start_m..</text></g><g><title>main (1 samples, 10.00%)</title><rect x="0.0000%" y="661" width="10.0000%" height="15" fill="rgb(211,188,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (1 samples, 10.00%)</title><rect x="0.0000%" y="645" width="10.0000%" height="15" fill="rgb(221,176,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50">std::rt::lang_..</text></g><g><title>std::panic::catch_unwind (1 samples, 10.00%)</title><rect x="0.0000%" y="629" width="10.0000%" height="15" fill="rgb(231,74,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50">std::panic::ca..</text></g><g><title>std::panicking::try (1 samples, 10.00%)</title><rect x="0.0000%" y="613" width="10.0000%" height="15" fill="rgb(217,211,50)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50">std::panicking..</text></g><g><title>std::panicking::try::do_call (1 samples, 10.00%)</title><rect x="0.0000%" y="597" width="10.0000%" height="15" fill="rgb(243,4,40)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50">std::panicking..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 10.00%)</title><rect x="0.0000%" y="581" width="10.0000%" height="15" fill="rgb(227,96,15)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50">std::rt::lang_..</text></g><g><title>std::panic::catch_unwind (1 samples, 10.00%)</title><rect x="0.0000%" y="565" width="10.0000%" height="15" fill="rgb(232,161,11)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50">std::panic::ca..</text></g><g><title>std::panicking::try (1 samples, 10.00%)</title><rect x="0.0000%" y="549" width="10.0000%" height="15" fill="rgb(229,125,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50">std::panicking..</text></g><g><title>std::panicking::try::do_call (1 samples, 10.00%)</title><rect x="0.0000%" y="533" width="10.0000%" height="15" fill="rgb(212,181,21)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50">std::panicking..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 10.00%)</title><rect x="0.0000%" y="517" width="10.0000%" height="15" fill="rgb(213,134,36)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50">core::ops::fun..</text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 10.00%)</title><rect x="0.0000%" y="501" width="10.0000%" height="15" fill="rgb(223,108,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50">std::rt::lang_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 10.00%)</title><rect x="0.0000%" y="485" width="10.0000%" height="15" fill="rgb(216,26,52)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50">std::sys_commo..</text></g><g><title>mem_bench::main (1 samples, 10.00%)</title><rect x="0.0000%" y="469" width="10.0000%" height="15" fill="rgb(252,43,4)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50">mem_bench::main</text></g><g><title>mem_bench::ressa_benchmark (1 samples, 10.00%)</title><rect x="0.0000%" y="453" width="10.0000%" height="15" fill="rgb(231,171,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50">mem_bench::res..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1 samples, 10.00%)</title><rect x="0.0000%" y="437" width="10.0000%" height="15" fill="rgb(252,72,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50">criterion::ben..</text></g><g><title>criterion::analysis::common (1 samples, 10.00%)</title><rect x="0.0000%" y="421" width="10.0000%" height="15" fill="rgb(210,115,44)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50">criterion::ana..</text></g><g><title>criterion::routine::Routine::sample (1 samples, 10.00%)</title><rect x="0.0000%" y="405" width="10.0000%" height="15" fill="rgb(216,124,3)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50">criterion::rou..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 10.00%)</title><rect x="0.0000%" y="389" width="10.0000%" height="15" fill="rgb(208,148,31)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50">&lt;core::iter::a..</text></g><g><title>source_code_parser::ressa::run_ressa_parse (1 samples, 10.00%)</title><rect x="0.0000%" y="373" width="10.0000%" height="15" fill="rgb(208,205,44)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 10.00%)</title><rect x="0.0000%" y="357" width="10.0000%" height="15" fill="rgb(240,162,1)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="0.0000%" y="341" width="10.0000%" height="15" fill="rgb(234,89,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 10.00%)</title><rect x="0.0000%" y="325" width="10.0000%" height="15" fill="rgb(249,23,51)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="0.0000%" y="309" width="10.0000%" height="15" fill="rgb(209,142,21)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::component::AnnotationComponent as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 10.00%)</title><rect x="0.0000%" y="293" width="10.0000%" height="15" fill="rgb(233,35,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="0.0000%" y="277" width="10.0000%" height="15" fill="rgb(211,156,25)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::model::AnnotationValuePair as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 10.00%)</title><rect x="0.0000%" y="261" width="10.0000%" height="15" fill="rgb(246,58,2)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::CompiledPattern::matches (1 samples, 10.00%)</title><rect x="0.0000%" y="245" width="10.0000%" height="15" fill="rgb(245,82,20)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50">source_code_pa..</text></g><g><title>regex::re_unicode::Regex::captures (1 samples, 10.00%)</title><rect x="0.0000%" y="229" width="10.0000%" height="15" fill="rgb(206,224,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50">regex::re_unic..</text></g><g><title>regex::re_unicode::Regex::captures_read_at (1 samples, 10.00%)</title><rect x="0.0000%" y="213" width="10.0000%" height="15" fill="rgb(218,160,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50">regex::re_unic..</text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (1 samples, 10.00%)</title><rect x="0.0000%" y="197" width="10.0000%" height="15" fill="rgb(208,162,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50">&lt;regex::exec::..</text></g><g><title>regex::dfa::Fsm::next_state (1 samples, 10.00%)</title><rect x="0.0000%" y="181" width="10.0000%" height="15" fill="rgb(249,26,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50">regex::dfa::Fs..</text></g><g><title>regex::dfa::Fsm::cached_state (1 samples, 10.00%)</title><rect x="0.0000%" y="165" width="10.0000%" height="15" fill="rgb(215,209,8)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50">regex::dfa::Fs..</text></g><g><title>regex::dfa::Fsm::add_state (1 samples, 10.00%)</title><rect x="0.0000%" y="149" width="10.0000%" height="15" fill="rgb(220,215,32)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50">regex::dfa::Fs..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 10.00%)</title><rect x="0.0000%" y="133" width="10.0000%" height="15" fill="rgb(216,113,51)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 10.00%)</title><rect x="0.0000%" y="117" width="10.0000%" height="15" fill="rgb(210,215,18)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 10.00%)</title><rect x="0.0000%" y="101" width="10.0000%" height="15" fill="rgb(254,152,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50">hashbrown::raw..</text></g><g><title>hashbrown::map::make_hash (1 samples, 10.00%)</title><rect x="0.0000%" y="85" width="10.0000%" height="15" fill="rgb(245,125,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50">hashbrown::map..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 10.00%)</title><rect x="10.0000%" y="357" width="10.0000%" height="15" fill="rgb(223,21,46)" fg:x="1" fg:w="1"/><text x="10.2500%" y="367.50">&lt;alloc::vec::V..</text></g><g><title>&lt;source_code_parser::prophet::component::ContainerComponent as core::clone::Clone&gt;::clone (1 samples, 10.00%)</title><rect x="10.0000%" y="341" width="10.0000%" height="15" fill="rgb(232,78,50)" fg:x="1" fg:w="1"/><text x="10.2500%" y="351.50">&lt;source_code_p..</text></g><g><title>alloc::slice::hack::to_vec (1 samples, 10.00%)</title><rect x="10.0000%" y="325" width="10.0000%" height="15" fill="rgb(236,122,2)" fg:x="1" fg:w="1"/><text x="10.2500%" y="335.50">alloc::slice::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 10.00%)</title><rect x="10.0000%" y="309" width="10.0000%" height="15" fill="rgb(205,15,25)" fg:x="1" fg:w="1"/><text x="10.2500%" y="319.50">&lt;T as alloc::s..</text></g><g><title>&lt;source_code_parser::ast::stmt::Stmt as core::clone::Clone&gt;::clone (1 samples, 10.00%)</title><rect x="10.0000%" y="293" width="10.0000%" height="15" fill="rgb(233,55,42)" fg:x="1" fg:w="1"/><text x="10.2500%" y="303.50">&lt;source_code_p..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 10.00%)</title><rect x="10.0000%" y="277" width="10.0000%" height="15" fill="rgb(246,53,30)" fg:x="1" fg:w="1"/><text x="10.2500%" y="287.50">&lt;T as alloc::s..</text></g><g><title>&lt;source_code_parser::prophet::component::MethodComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (2 samples, 20.00%)</title><rect x="20.0000%" y="293" width="20.0000%" height="15" fill="rgb(213,176,14)" fg:x="2" fg:w="2"/><text x="20.2500%" y="303.50">&lt;source_code_parser::prophet::c..</text></g><g><title>&lt;source_code_parser::prophet::component::MethodParamComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (2 samples, 20.00%)</title><rect x="20.0000%" y="277" width="20.0000%" height="15" fill="rgb(246,102,21)" fg:x="2" fg:w="2"/><text x="20.2500%" y="287.50">&lt;source_code_parser::prophet::c..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (2 samples, 20.00%)</title><rect x="20.0000%" y="261" width="20.0000%" height="15" fill="rgb(224,146,53)" fg:x="2" fg:w="2"/><text x="20.2500%" y="271.50">source_code_parser::ressa::node..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 20.00%)</title><rect x="20.0000%" y="245" width="20.0000%" height="15" fill="rgb(214,159,29)" fg:x="2" fg:w="2"/><text x="20.2500%" y="255.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; ..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 20.00%)</title><rect x="20.0000%" y="229" width="20.0000%" height="15" fill="rgb(208,198,23)" fg:x="2" fg:w="2"/><text x="20.2500%" y="239.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; ..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 10.00%)</title><rect x="30.0000%" y="213" width="10.0000%" height="15" fill="rgb(213,119,12)" fg:x="3" fg:w="1"/><text x="30.2500%" y="223.50">&lt;alloc::string..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 10.00%)</title><rect x="30.0000%" y="197" width="10.0000%" height="15" fill="rgb(205,159,45)" fg:x="3" fg:w="1"/><text x="30.2500%" y="207.50">&lt;alloc::vec::V..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 10.00%)</title><rect x="30.0000%" y="181" width="10.0000%" height="15" fill="rgb(228,41,7)" fg:x="3" fg:w="1"/><text x="30.2500%" y="191.50">alloc::slice::..</text></g><g><title>alloc::slice::hack::to_vec (1 samples, 10.00%)</title><rect x="30.0000%" y="165" width="10.0000%" height="15" fill="rgb(246,105,23)" fg:x="3" fg:w="1"/><text x="30.2500%" y="175.50">alloc::slice::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 10.00%)</title><rect x="30.0000%" y="149" width="10.0000%" height="15" fill="rgb(237,55,51)" fg:x="3" fg:w="1"/><text x="30.2500%" y="159.50">&lt;T as alloc::s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 10.00%)</title><rect x="30.0000%" y="133" width="10.0000%" height="15" fill="rgb(251,108,50)" fg:x="3" fg:w="1"/><text x="30.2500%" y="143.50">alloc::vec::Ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 10.00%)</title><rect x="30.0000%" y="117" width="10.0000%" height="15" fill="rgb(228,112,29)" fg:x="3" fg:w="1"/><text x="30.2500%" y="127.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 10.00%)</title><rect x="30.0000%" y="101" width="10.0000%" height="15" fill="rgb(214,26,15)" fg:x="3" fg:w="1"/><text x="30.2500%" y="111.50">alloc::raw_vec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 10.00%)</title><rect x="30.0000%" y="85" width="10.0000%" height="15" fill="rgb(222,191,3)" fg:x="3" fg:w="1"/><text x="30.2500%" y="95.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 10.00%)</title><rect x="30.0000%" y="69" width="10.0000%" height="15" fill="rgb(208,58,22)" fg:x="3" fg:w="1"/><text x="30.2500%" y="79.50">alloc::alloc::..</text></g><g><title>alloc::alloc::alloc (1 samples, 10.00%)</title><rect x="30.0000%" y="53" width="10.0000%" height="15" fill="rgb(233,59,18)" fg:x="3" fg:w="1"/><text x="30.2500%" y="63.50">alloc::alloc::..</text></g><g><title>_rjem_mallocx (1 samples, 10.00%)</title><rect x="30.0000%" y="37" width="10.0000%" height="15" fill="rgb(254,97,31)" fg:x="3" fg:w="1"/><text x="30.2500%" y="47.50">_rjem_mallocx</text></g><g><title>&lt;source_code_parser::prophet::component::AnnotationComponent as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 10.00%)</title><rect x="40.0000%" y="277" width="10.0000%" height="15" fill="rgb(252,149,52)" fg:x="4" fg:w="1"/><text x="40.2500%" y="287.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="40.0000%" y="261" width="10.0000%" height="15" fill="rgb(217,200,18)" fg:x="4" fg:w="1"/><text x="40.2500%" y="271.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::model::AnnotationValuePair as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 10.00%)</title><rect x="40.0000%" y="245" width="10.0000%" height="15" fill="rgb(227,120,45)" fg:x="4" fg:w="1"/><text x="40.2500%" y="255.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::CompiledPattern::matches (1 samples, 10.00%)</title><rect x="40.0000%" y="229" width="10.0000%" height="15" fill="rgb(217,170,16)" fg:x="4" fg:w="1"/><text x="40.2500%" y="239.50">source_code_pa..</text></g><g><title>regex::re_unicode::Regex::captures (1 samples, 10.00%)</title><rect x="40.0000%" y="213" width="10.0000%" height="15" fill="rgb(223,101,20)" fg:x="4" fg:w="1"/><text x="40.2500%" y="223.50">regex::re_unic..</text></g><g><title>regex::re_unicode::Regex::captures_read_at (1 samples, 10.00%)</title><rect x="40.0000%" y="197" width="10.0000%" height="15" fill="rgb(236,101,42)" fg:x="4" fg:w="1"/><text x="40.2500%" y="207.50">regex::re_unic..</text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (1 samples, 10.00%)</title><rect x="40.0000%" y="181" width="10.0000%" height="15" fill="rgb(248,176,39)" fg:x="4" fg:w="1"/><text x="40.2500%" y="191.50">&lt;regex::exec::..</text></g><g><title>regex::dfa::Fsm::next_state (1 samples, 10.00%)</title><rect x="40.0000%" y="165" width="10.0000%" height="15" fill="rgb(247,201,42)" fg:x="4" fg:w="1"/><text x="40.2500%" y="175.50">regex::dfa::Fs..</text></g><g><title>_start (6 samples, 60.00%)</title><rect x="10.0000%" y="677" width="60.0000%" height="15" fill="rgb(238,115,42)" fg:x="1" fg:w="6"/><text x="10.2500%" y="687.50">_start</text></g><g><title>__libc_start_main (6 samples, 60.00%)</title><rect x="10.0000%" y="661" width="60.0000%" height="15" fill="rgb(224,215,13)" fg:x="1" fg:w="6"/><text x="10.2500%" y="671.50">__libc_start_main</text></g><g><title>main (6 samples, 60.00%)</title><rect x="10.0000%" y="645" width="60.0000%" height="15" fill="rgb(221,229,41)" fg:x="1" fg:w="6"/><text x="10.2500%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (6 samples, 60.00%)</title><rect x="10.0000%" y="629" width="60.0000%" height="15" fill="rgb(208,113,43)" fg:x="1" fg:w="6"/><text x="10.2500%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (6 samples, 60.00%)</title><rect x="10.0000%" y="613" width="60.0000%" height="15" fill="rgb(246,63,49)" fg:x="1" fg:w="6"/><text x="10.2500%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6 samples, 60.00%)</title><rect x="10.0000%" y="597" width="60.0000%" height="15" fill="rgb(227,129,34)" fg:x="1" fg:w="6"/><text x="10.2500%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6 samples, 60.00%)</title><rect x="10.0000%" y="581" width="60.0000%" height="15" fill="rgb(234,146,16)" fg:x="1" fg:w="6"/><text x="10.2500%" y="591.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (6 samples, 60.00%)</title><rect x="10.0000%" y="565" width="60.0000%" height="15" fill="rgb(252,86,6)" fg:x="1" fg:w="6"/><text x="10.2500%" y="575.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (6 samples, 60.00%)</title><rect x="10.0000%" y="549" width="60.0000%" height="15" fill="rgb(235,161,38)" fg:x="1" fg:w="6"/><text x="10.2500%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6 samples, 60.00%)</title><rect x="10.0000%" y="533" width="60.0000%" height="15" fill="rgb(238,108,23)" fg:x="1" fg:w="6"/><text x="10.2500%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6 samples, 60.00%)</title><rect x="10.0000%" y="517" width="60.0000%" height="15" fill="rgb(248,132,33)" fg:x="1" fg:w="6"/><text x="10.2500%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6 samples, 60.00%)</title><rect x="10.0000%" y="501" width="60.0000%" height="15" fill="rgb(237,34,29)" fg:x="1" fg:w="6"/><text x="10.2500%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (6 samples, 60.00%)</title><rect x="10.0000%" y="485" width="60.0000%" height="15" fill="rgb(250,202,26)" fg:x="1" fg:w="6"/><text x="10.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 60.00%)</title><rect x="10.0000%" y="469" width="60.0000%" height="15" fill="rgb(249,192,0)" fg:x="1" fg:w="6"/><text x="10.2500%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mem_bench::main (6 samples, 60.00%)</title><rect x="10.0000%" y="453" width="60.0000%" height="15" fill="rgb(254,34,54)" fg:x="1" fg:w="6"/><text x="10.2500%" y="463.50">mem_bench::main</text></g><g><title>mem_bench::ressa_benchmark (6 samples, 60.00%)</title><rect x="10.0000%" y="437" width="60.0000%" height="15" fill="rgb(207,113,19)" fg:x="1" fg:w="6"/><text x="10.2500%" y="447.50">mem_bench::ressa_benchmark</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (6 samples, 60.00%)</title><rect x="10.0000%" y="421" width="60.0000%" height="15" fill="rgb(249,56,53)" fg:x="1" fg:w="6"/><text x="10.2500%" y="431.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::analysis::common (6 samples, 60.00%)</title><rect x="10.0000%" y="405" width="60.0000%" height="15" fill="rgb(253,52,13)" fg:x="1" fg:w="6"/><text x="10.2500%" y="415.50">criterion::analysis::common</text></g><g><title>criterion::routine::Routine::sample (6 samples, 60.00%)</title><rect x="10.0000%" y="389" width="60.0000%" height="15" fill="rgb(254,52,45)" fg:x="1" fg:w="6"/><text x="10.2500%" y="399.50">criterion::routine::Routine::sample</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 60.00%)</title><rect x="10.0000%" y="373" width="60.0000%" height="15" fill="rgb(234,9,45)" fg:x="1" fg:w="6"/><text x="10.2500%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>source_code_parser::ressa::run_ressa_parse (5 samples, 50.00%)</title><rect x="20.0000%" y="357" width="50.0000%" height="15" fill="rgb(246,108,2)" fg:x="2" fg:w="5"/><text x="20.2500%" y="367.50">source_code_parser::ressa::run_ressa_parse</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (5 samples, 50.00%)</title><rect x="20.0000%" y="341" width="50.0000%" height="15" fill="rgb(208,193,50)" fg:x="2" fg:w="5"/><text x="20.2500%" y="351.50">&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (5 samples, 50.00%)</title><rect x="20.0000%" y="325" width="50.0000%" height="15" fill="rgb(207,152,52)" fg:x="2" fg:w="5"/><text x="20.2500%" y="335.50">source_code_parser::ressa::node_pattern::ressa_node_parse</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (5 samples, 50.00%)</title><rect x="20.0000%" y="309" width="50.0000%" height="15" fill="rgb(238,227,54)" fg:x="2" fg:w="5"/><text x="20.2500%" y="319.50">&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (3 samples, 30.00%)</title><rect x="40.0000%" y="293" width="30.0000%" height="15" fill="rgb(220,63,33)" fg:x="4" fg:w="3"/><text x="40.2500%" y="303.50">source_code_parser::ressa::node_pattern::ressa_n..</text></g><g><title>source_code_parser::ressa::callback::Executor::execute (2 samples, 20.00%)</title><rect x="50.0000%" y="277" width="20.0000%" height="15" fill="rgb(242,48,52)" fg:x="5" fg:w="2"/><text x="50.2500%" y="287.50">source_code_parser::ressa::call..</text></g><g><title>rune::load::load_sources (1 samples, 10.00%)</title><rect x="60.0000%" y="261" width="10.0000%" height="15" fill="rgb(249,199,12)" fg:x="6" fg:w="1"/><text x="60.2500%" y="271.50">rune::load::lo..</text></g><g><title>rune::load::load_sources_with_visitor (1 samples, 10.00%)</title><rect x="60.0000%" y="245" width="10.0000%" height="15" fill="rgb(206,171,0)" fg:x="6" fg:w="1"/><text x="60.2500%" y="255.50">rune::load::lo..</text></g><g><title>rune::compiling::compile_with_options (1 samples, 10.00%)</title><rect x="60.0000%" y="229" width="10.0000%" height="15" fill="rgb(212,168,31)" fg:x="6" fg:w="1"/><text x="60.2500%" y="239.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::item_fn::&lt;impl rune::compiling::v1::assemble::AssembleFn for rune::ast::item_fn::ItemFn&gt;::assemble_fn (1 samples, 10.00%)</title><rect x="60.0000%" y="213" width="10.0000%" height="15" fill="rgb(215,48,8)" fg:x="6" fg:w="1"/><text x="60.2500%" y="223.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::block::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::block::Block&gt;::assemble (1 samples, 10.00%)</title><rect x="60.0000%" y="197" width="10.0000%" height="15" fill="rgb(224,229,37)" fg:x="6" fg:w="1"/><text x="60.2500%" y="207.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::expr::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr::Expr&gt;::assemble (1 samples, 10.00%)</title><rect x="60.0000%" y="181" width="10.0000%" height="15" fill="rgb(229,217,3)" fg:x="6" fg:w="1"/><text x="60.2500%" y="191.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::expr_path::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::path::Path&gt;::assemble (1 samples, 10.00%)</title><rect x="60.0000%" y="165" width="10.0000%" height="15" fill="rgb(211,15,23)" fg:x="6" fg:w="1"/><text x="60.2500%" y="175.50">rune::compilin..</text></g><g><title>rune::query::Query::convert_path (1 samples, 10.00%)</title><rect x="60.0000%" y="149" width="10.0000%" height="15" fill="rgb(217,70,2)" fg:x="6" fg:w="1"/><text x="60.2500%" y="159.50">rune::query::Q..</text></g><g><title>runestick::names::Names::find_node (1 samples, 10.00%)</title><rect x="60.0000%" y="133" width="10.0000%" height="15" fill="rgb(205,102,16)" fg:x="6" fg:w="1"/><text x="60.2500%" y="143.50">runestick::nam..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1 samples, 10.00%)</title><rect x="70.0000%" y="677" width="10.0000%" height="15" fill="rgb(215,158,29)" fg:x="7" fg:w="1"/><text x="70.2500%" y="687.50">criterion::ben..</text></g><g><title>criterion::analysis::common (1 samples, 10.00%)</title><rect x="70.0000%" y="661" width="10.0000%" height="15" fill="rgb(228,19,8)" fg:x="7" fg:w="1"/><text x="70.2500%" y="671.50">criterion::ana..</text></g><g><title>criterion::routine::Routine::sample (1 samples, 10.00%)</title><rect x="70.0000%" y="645" width="10.0000%" height="15" fill="rgb(228,53,2)" fg:x="7" fg:w="1"/><text x="70.2500%" y="655.50">criterion::rou..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 10.00%)</title><rect x="70.0000%" y="629" width="10.0000%" height="15" fill="rgb(215,129,32)" fg:x="7" fg:w="1"/><text x="70.2500%" y="639.50">&lt;core::iter::a..</text></g><g><title>source_code_parser::ressa::run_ressa_parse (1 samples, 10.00%)</title><rect x="70.0000%" y="613" width="10.0000%" height="15" fill="rgb(213,4,28)" fg:x="7" fg:w="1"/><text x="70.2500%" y="623.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 10.00%)</title><rect x="70.0000%" y="597" width="10.0000%" height="15" fill="rgb(234,121,21)" fg:x="7" fg:w="1"/><text x="70.2500%" y="607.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="70.0000%" y="581" width="10.0000%" height="15" fill="rgb(243,47,53)" fg:x="7" fg:w="1"/><text x="70.2500%" y="591.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 10.00%)</title><rect x="70.0000%" y="565" width="10.0000%" height="15" fill="rgb(254,132,15)" fg:x="7" fg:w="1"/><text x="70.2500%" y="575.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="70.0000%" y="549" width="10.0000%" height="15" fill="rgb(208,76,35)" fg:x="7" fg:w="1"/><text x="70.2500%" y="559.50">source_code_pa..</text></g><g><title>source_code_parser::ressa::callback::Executor::execute (1 samples, 10.00%)</title><rect x="70.0000%" y="533" width="10.0000%" height="15" fill="rgb(250,144,14)" fg:x="7" fg:w="1"/><text x="70.2500%" y="543.50">source_code_pa..</text></g><g><title>rune::load::load_sources (1 samples, 10.00%)</title><rect x="70.0000%" y="517" width="10.0000%" height="15" fill="rgb(237,172,27)" fg:x="7" fg:w="1"/><text x="70.2500%" y="527.50">rune::load::lo..</text></g><g><title>rune::load::load_sources_with_visitor (1 samples, 10.00%)</title><rect x="70.0000%" y="501" width="10.0000%" height="15" fill="rgb(248,79,39)" fg:x="7" fg:w="1"/><text x="70.2500%" y="511.50">rune::load::lo..</text></g><g><title>rune::compiling::compile_with_options (1 samples, 10.00%)</title><rect x="70.0000%" y="485" width="10.0000%" height="15" fill="rgb(230,196,54)" fg:x="7" fg:w="1"/><text x="70.2500%" y="495.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::item_fn::&lt;impl rune::compiling::v1::assemble::AssembleFn for rune::ast::item_fn::ItemFn&gt;::assemble_fn (1 samples, 10.00%)</title><rect x="70.0000%" y="469" width="10.0000%" height="15" fill="rgb(212,199,18)" fg:x="7" fg:w="1"/><text x="70.2500%" y="479.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::block::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::block::Block&gt;::assemble (1 samples, 10.00%)</title><rect x="70.0000%" y="453" width="10.0000%" height="15" fill="rgb(247,2,13)" fg:x="7" fg:w="1"/><text x="70.2500%" y="463.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::local::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::local::Local&gt;::assemble (1 samples, 10.00%)</title><rect x="70.0000%" y="437" width="10.0000%" height="15" fill="rgb(250,137,5)" fg:x="7" fg:w="1"/><text x="70.2500%" y="447.50">rune::compilin..</text></g><g><title>rune::compiling::v1::Compiler::compile_pat (1 samples, 10.00%)</title><rect x="70.0000%" y="421" width="10.0000%" height="15" fill="rgb(242,142,53)" fg:x="7" fg:w="1"/><text x="70.2500%" y="431.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::local::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::local::Local&gt;::assemble::{{closure}} (1 samples, 10.00%)</title><rect x="70.0000%" y="405" width="10.0000%" height="15" fill="rgb(216,58,5)" fg:x="7" fg:w="1"/><text x="70.2500%" y="415.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::expr::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr::Expr&gt;::assemble (1 samples, 10.00%)</title><rect x="70.0000%" y="389" width="10.0000%" height="15" fill="rgb(237,77,13)" fg:x="7" fg:w="1"/><text x="70.2500%" y="399.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::expr_binary::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr_binary::ExprBinary&gt;::assemble (1 samples, 10.00%)</title><rect x="70.0000%" y="373" width="10.0000%" height="15" fill="rgb(222,20,14)" fg:x="7" fg:w="1"/><text x="70.2500%" y="383.50">rune::compilin..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="357" width="10.0000%" height="15" fill="rgb(228,99,53)" fg:x="7" fg:w="1"/><text x="70.2500%" y="367.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="341" width="10.0000%" height="15" fill="rgb(219,128,46)" fg:x="7" fg:w="1"/><text x="70.2500%" y="351.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="325" width="10.0000%" height="15" fill="rgb(242,178,34)" fg:x="7" fg:w="1"/><text x="70.2500%" y="335.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="309" width="10.0000%" height="15" fill="rgb(243,14,50)" fg:x="7" fg:w="1"/><text x="70.2500%" y="319.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="293" width="10.0000%" height="15" fill="rgb(213,209,33)" fg:x="7" fg:w="1"/><text x="70.2500%" y="303.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="277" width="10.0000%" height="15" fill="rgb(247,227,37)" fg:x="7" fg:w="1"/><text x="70.2500%" y="287.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="261" width="10.0000%" height="15" fill="rgb(238,47,41)" fg:x="7" fg:w="1"/><text x="70.2500%" y="271.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="245" width="10.0000%" height="15" fill="rgb(254,45,16)" fg:x="7" fg:w="1"/><text x="70.2500%" y="255.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::path::Path as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="229" width="10.0000%" height="15" fill="rgb(229,200,33)" fg:x="7" fg:w="1"/><text x="70.2500%" y="239.50">&lt;rune::ast::pa..</text></g><g><title>&lt;rune::ast::path::PathSegment as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="70.0000%" y="213" width="10.0000%" height="15" fill="rgb(239,66,13)" fg:x="7" fg:w="1"/><text x="70.2500%" y="223.50">&lt;rune::ast::pa..</text></g><g><title>mem_bench::ressa_benchmark (1 samples, 10.00%)</title><rect x="80.0000%" y="677" width="10.0000%" height="15" fill="rgb(233,58,1)" fg:x="8" fg:w="1"/><text x="80.2500%" y="687.50">mem_bench::res..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1 samples, 10.00%)</title><rect x="80.0000%" y="661" width="10.0000%" height="15" fill="rgb(234,138,46)" fg:x="8" fg:w="1"/><text x="80.2500%" y="671.50">criterion::ben..</text></g><g><title>criterion::analysis::common (1 samples, 10.00%)</title><rect x="80.0000%" y="645" width="10.0000%" height="15" fill="rgb(208,122,12)" fg:x="8" fg:w="1"/><text x="80.2500%" y="655.50">criterion::ana..</text></g><g><title>criterion::routine::Routine::sample (1 samples, 10.00%)</title><rect x="80.0000%" y="629" width="10.0000%" height="15" fill="rgb(218,9,20)" fg:x="8" fg:w="1"/><text x="80.2500%" y="639.50">criterion::rou..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 10.00%)</title><rect x="80.0000%" y="613" width="10.0000%" height="15" fill="rgb(236,199,0)" fg:x="8" fg:w="1"/><text x="80.2500%" y="623.50">&lt;core::iter::a..</text></g><g><title>source_code_parser::ressa::run_ressa_parse (1 samples, 10.00%)</title><rect x="80.0000%" y="597" width="10.0000%" height="15" fill="rgb(223,64,25)" fg:x="8" fg:w="1"/><text x="80.2500%" y="607.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 10.00%)</title><rect x="80.0000%" y="581" width="10.0000%" height="15" fill="rgb(254,175,42)" fg:x="8" fg:w="1"/><text x="80.2500%" y="591.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="80.0000%" y="565" width="10.0000%" height="15" fill="rgb(223,27,45)" fg:x="8" fg:w="1"/><text x="80.2500%" y="575.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 10.00%)</title><rect x="80.0000%" y="549" width="10.0000%" height="15" fill="rgb(250,178,42)" fg:x="8" fg:w="1"/><text x="80.2500%" y="559.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="80.0000%" y="533" width="10.0000%" height="15" fill="rgb(211,224,6)" fg:x="8" fg:w="1"/><text x="80.2500%" y="543.50">source_code_pa..</text></g><g><title>source_code_parser::ressa::callback::Executor::execute (1 samples, 10.00%)</title><rect x="80.0000%" y="517" width="10.0000%" height="15" fill="rgb(243,27,5)" fg:x="8" fg:w="1"/><text x="80.2500%" y="527.50">source_code_pa..</text></g><g><title>rune::load::load_sources (1 samples, 10.00%)</title><rect x="80.0000%" y="501" width="10.0000%" height="15" fill="rgb(242,154,48)" fg:x="8" fg:w="1"/><text x="80.2500%" y="511.50">rune::load::lo..</text></g><g><title>rune::load::load_sources_with_visitor (1 samples, 10.00%)</title><rect x="80.0000%" y="485" width="10.0000%" height="15" fill="rgb(241,154,7)" fg:x="8" fg:w="1"/><text x="80.2500%" y="495.50">rune::load::lo..</text></g><g><title>rune::compiling::compile_with_options (1 samples, 10.00%)</title><rect x="80.0000%" y="469" width="10.0000%" height="15" fill="rgb(253,139,4)" fg:x="8" fg:w="1"/><text x="80.2500%" y="479.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::item_fn::&lt;impl rune::compiling::v1::assemble::AssembleFn for rune::ast::item_fn::ItemFn&gt;::assemble_fn (1 samples, 10.00%)</title><rect x="80.0000%" y="453" width="10.0000%" height="15" fill="rgb(236,90,27)" fg:x="8" fg:w="1"/><text x="80.2500%" y="463.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::block::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::block::Block&gt;::assemble (1 samples, 10.00%)</title><rect x="80.0000%" y="437" width="10.0000%" height="15" fill="rgb(232,183,31)" fg:x="8" fg:w="1"/><text x="80.2500%" y="447.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::expr::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr::Expr&gt;::assemble (1 samples, 10.00%)</title><rect x="80.0000%" y="421" width="10.0000%" height="15" fill="rgb(251,115,23)" fg:x="8" fg:w="1"/><text x="80.2500%" y="431.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::expr_call::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr_call::ExprCall&gt;::assemble (1 samples, 10.00%)</title><rect x="80.0000%" y="405" width="10.0000%" height="15" fill="rgb(218,155,23)" fg:x="8" fg:w="1"/><text x="80.2500%" y="415.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::expr::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr::Expr&gt;::assemble (1 samples, 10.00%)</title><rect x="80.0000%" y="389" width="10.0000%" height="15" fill="rgb(216,170,2)" fg:x="8" fg:w="1"/><text x="80.2500%" y="399.50">rune::compilin..</text></g><g><title>rune::compiling::v1::assemble::expr_call::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr_call::ExprCall&gt;::assemble (1 samples, 10.00%)</title><rect x="80.0000%" y="373" width="10.0000%" height="15" fill="rgb(224,207,49)" fg:x="8" fg:w="1"/><text x="80.2500%" y="383.50">rune::compilin..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 10.00%)</title><rect x="80.0000%" y="357" width="10.0000%" height="15" fill="rgb(218,20,20)" fg:x="8" fg:w="1"/><text x="80.2500%" y="367.50">&lt;T as alloc::s..</text></g><g><title>&lt;runestick::compile_meta::CompileMeta as core::fmt::Display&gt;::fmt (1 samples, 10.00%)</title><rect x="80.0000%" y="341" width="10.0000%" height="15" fill="rgb(215,153,39)" fg:x="8" fg:w="1"/><text x="80.2500%" y="351.50">&lt;runestick::co..</text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 10.00%)</title><rect x="80.0000%" y="325" width="10.0000%" height="15" fill="rgb(225,31,44)" fg:x="8" fg:w="1"/><text x="80.2500%" y="335.50">core::fmt::For..</text></g><g><title>core::fmt::write (1 samples, 10.00%)</title><rect x="80.0000%" y="309" width="10.0000%" height="15" fill="rgb(249,28,43)" fg:x="8" fg:w="1"/><text x="80.2500%" y="319.50">core::fmt::wri..</text></g><g><title>&lt;runestick::item::Item as core::fmt::Display&gt;::fmt (1 samples, 10.00%)</title><rect x="80.0000%" y="293" width="10.0000%" height="15" fill="rgb(248,226,48)" fg:x="8" fg:w="1"/><text x="80.2500%" y="303.50">&lt;runestick::it..</text></g><g><title>core::fmt::write (1 samples, 10.00%)</title><rect x="80.0000%" y="277" width="10.0000%" height="15" fill="rgb(223,196,40)" fg:x="8" fg:w="1"/><text x="80.2500%" y="287.50">core::fmt::wri..</text></g><g><title>&lt;runestick::item::ComponentRef as core::fmt::Display&gt;::fmt (1 samples, 10.00%)</title><rect x="80.0000%" y="261" width="10.0000%" height="15" fill="rgb(248,100,10)" fg:x="8" fg:w="1"/><text x="80.2500%" y="271.50">&lt;runestick::it..</text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 10.00%)</title><rect x="80.0000%" y="245" width="10.0000%" height="15" fill="rgb(232,89,25)" fg:x="8" fg:w="1"/><text x="80.2500%" y="255.50">core::fmt::For..</text></g><g><title>core::fmt::write (1 samples, 10.00%)</title><rect x="80.0000%" y="229" width="10.0000%" height="15" fill="rgb(235,161,42)" fg:x="8" fg:w="1"/><text x="80.2500%" y="239.50">core::fmt::wri..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 10.00%)</title><rect x="80.0000%" y="213" width="10.0000%" height="15" fill="rgb(243,25,13)" fg:x="8" fg:w="1"/><text x="80.2500%" y="223.50">&lt;&amp;mut W as cor..</text></g><g><title>all (10 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(216,132,19)" fg:x="0" fg:w="10"/><text x="0.2500%" y="719.50"></text></g><g><title>mem_bench-32886 (10 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(244,42,32)" fg:x="0" fg:w="10"/><text x="0.2500%" y="703.50">mem_bench-32886</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 10.00%)</title><rect x="90.0000%" y="677" width="10.0000%" height="15" fill="rgb(251,29,54)" fg:x="9" fg:w="1"/><text x="90.2500%" y="687.50">std::sys_commo..</text></g><g><title>mem_bench::main (1 samples, 10.00%)</title><rect x="90.0000%" y="661" width="10.0000%" height="15" fill="rgb(247,201,10)" fg:x="9" fg:w="1"/><text x="90.2500%" y="671.50">mem_bench::main</text></g><g><title>mem_bench::ressa_benchmark (1 samples, 10.00%)</title><rect x="90.0000%" y="645" width="10.0000%" height="15" fill="rgb(242,177,39)" fg:x="9" fg:w="1"/><text x="90.2500%" y="655.50">mem_bench::res..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1 samples, 10.00%)</title><rect x="90.0000%" y="629" width="10.0000%" height="15" fill="rgb(252,31,37)" fg:x="9" fg:w="1"/><text x="90.2500%" y="639.50">criterion::ben..</text></g><g><title>criterion::analysis::common (1 samples, 10.00%)</title><rect x="90.0000%" y="613" width="10.0000%" height="15" fill="rgb(241,96,20)" fg:x="9" fg:w="1"/><text x="90.2500%" y="623.50">criterion::ana..</text></g><g><title>criterion::routine::Routine::sample (1 samples, 10.00%)</title><rect x="90.0000%" y="597" width="10.0000%" height="15" fill="rgb(237,154,2)" fg:x="9" fg:w="1"/><text x="90.2500%" y="607.50">criterion::rou..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 10.00%)</title><rect x="90.0000%" y="581" width="10.0000%" height="15" fill="rgb(218,0,42)" fg:x="9" fg:w="1"/><text x="90.2500%" y="591.50">&lt;core::iter::a..</text></g><g><title>source_code_parser::ressa::run_ressa_parse (1 samples, 10.00%)</title><rect x="90.0000%" y="565" width="10.0000%" height="15" fill="rgb(254,86,9)" fg:x="9" fg:w="1"/><text x="90.2500%" y="575.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 10.00%)</title><rect x="90.0000%" y="549" width="10.0000%" height="15" fill="rgb(243,111,28)" fg:x="9" fg:w="1"/><text x="90.2500%" y="559.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="90.0000%" y="533" width="10.0000%" height="15" fill="rgb(210,62,41)" fg:x="9" fg:w="1"/><text x="90.2500%" y="543.50">source_code_pa..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 10.00%)</title><rect x="90.0000%" y="517" width="10.0000%" height="15" fill="rgb(226,126,12)" fg:x="9" fg:w="1"/><text x="90.2500%" y="527.50">&lt;source_code_p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 10.00%)</title><rect x="90.0000%" y="501" width="10.0000%" height="15" fill="rgb(223,151,4)" fg:x="9" fg:w="1"/><text x="90.2500%" y="511.50">source_code_pa..</text></g><g><title>source_code_parser::ressa::callback::Executor::execute (1 samples, 10.00%)</title><rect x="90.0000%" y="485" width="10.0000%" height="15" fill="rgb(246,169,43)" fg:x="9" fg:w="1"/><text x="90.2500%" y="495.50">source_code_pa..</text></g><g><title>rune::load::load_sources (1 samples, 10.00%)</title><rect x="90.0000%" y="469" width="10.0000%" height="15" fill="rgb(205,90,13)" fg:x="9" fg:w="1"/><text x="90.2500%" y="479.50">rune::load::lo..</text></g><g><title>rune::load::load_sources_with_visitor (1 samples, 10.00%)</title><rect x="90.0000%" y="453" width="10.0000%" height="15" fill="rgb(240,101,23)" fg:x="9" fg:w="1"/><text x="90.2500%" y="463.50">rune::load::lo..</text></g><g><title>rune::compiling::compile_with_options (1 samples, 10.00%)</title><rect x="90.0000%" y="437" width="10.0000%" height="15" fill="rgb(227,204,17)" fg:x="9" fg:w="1"/><text x="90.2500%" y="447.50">rune::compilin..</text></g><g><title>rune::worker::Worker::run (1 samples, 10.00%)</title><rect x="90.0000%" y="421" width="10.0000%" height="15" fill="rgb(225,194,22)" fg:x="9" fg:w="1"/><text x="90.2500%" y="431.50">rune::worker::..</text></g><g><title>&lt;rune::ast::file::File as rune::indexing::index::Index&gt;::index (1 samples, 10.00%)</title><rect x="90.0000%" y="405" width="10.0000%" height="15" fill="rgb(254,81,19)" fg:x="9" fg:w="1"/><text x="90.2500%" y="415.50">&lt;rune::ast::fi..</text></g><g><title>&lt;rune::ast::item::Item as rune::indexing::index::Index&gt;::index (1 samples, 10.00%)</title><rect x="90.0000%" y="389" width="10.0000%" height="15" fill="rgb(238,64,0)" fg:x="9" fg:w="1"/><text x="90.2500%" y="399.50">&lt;rune::ast::it..</text></g><g><title>&lt;rune::ast::item_fn::ItemFn as rune::indexing::index::Index&gt;::index (1 samples, 10.00%)</title><rect x="90.0000%" y="373" width="10.0000%" height="15" fill="rgb(240,194,42)" fg:x="9" fg:w="1"/><text x="90.2500%" y="383.50">&lt;rune::ast::it..</text></g><g><title>&lt;rune::ast::block::Block as rune::indexing::index::Index&gt;::index (1 samples, 10.00%)</title><rect x="90.0000%" y="357" width="10.0000%" height="15" fill="rgb(248,20,45)" fg:x="9" fg:w="1"/><text x="90.2500%" y="367.50">&lt;rune::ast::bl..</text></g><g><title>&lt;rune::ast::local::Local as rune::indexing::index::Index&gt;::index (1 samples, 10.00%)</title><rect x="90.0000%" y="341" width="10.0000%" height="15" fill="rgb(247,7,21)" fg:x="9" fg:w="1"/><text x="90.2500%" y="351.50">&lt;rune::ast::lo..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::indexing::index::Index&gt;::index (1 samples, 10.00%)</title><rect x="90.0000%" y="325" width="10.0000%" height="15" fill="rgb(240,57,24)" fg:x="9" fg:w="1"/><text x="90.2500%" y="335.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr_binary::ExprBinary as rune::indexing::index::Index&gt;::index (1 samples, 10.00%)</title><rect x="90.0000%" y="309" width="10.0000%" height="15" fill="rgb(246,134,35)" fg:x="9" fg:w="1"/><text x="90.2500%" y="319.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::indexing::index::Index&gt;::index (1 samples, 10.00%)</title><rect x="90.0000%" y="293" width="10.0000%" height="15" fill="rgb(231,30,42)" fg:x="9" fg:w="1"/><text x="90.2500%" y="303.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="90.0000%" y="277" width="10.0000%" height="15" fill="rgb(225,89,35)" fg:x="9" fg:w="1"/><text x="90.2500%" y="287.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="90.0000%" y="261" width="10.0000%" height="15" fill="rgb(245,77,9)" fg:x="9" fg:w="1"/><text x="90.2500%" y="271.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="90.0000%" y="245" width="10.0000%" height="15" fill="rgb(224,99,23)" fg:x="9" fg:w="1"/><text x="90.2500%" y="255.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="90.0000%" y="229" width="10.0000%" height="15" fill="rgb(249,38,42)" fg:x="9" fg:w="1"/><text x="90.2500%" y="239.50">&lt;rune::ast::ex..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 10.00%)</title><rect x="90.0000%" y="213" width="10.0000%" height="15" fill="rgb(241,135,23)" fg:x="9" fg:w="1"/><text x="90.2500%" y="223.50">&lt;rune::ast::ex..</text></g></svg></svg>